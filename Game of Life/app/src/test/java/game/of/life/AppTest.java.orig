/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package game.of.life;

import org.junit.jupiter.api.Test;

import static org.junit.jupiter.api.Assertions.*;

import java.util.HashMap;
import java.util.Map;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Nested;

class GameOfLifeTest {
    @BeforeEach public void before() {
        gameOfLife = new GameOfLife(4, 8);
    }
    
    @Nested
    class Initialization {
        /**
         * L'application doit s'initialisée
         */
        @Test void gameOfLifeIsInitialized() {
            assertNotNull(gameOfLife);
            assertArrayEquals(new int[]{4, 8}, gameOfLife.getGridSize());
        }
    
        /**
         * Toutes les cellules doivent être initialisées mortes
         * @throws OutOfRangeException 
         */
        @Test void allCellsInitializedAsEmpty() throws OutOfRangeException {
<<<<<<< HEAD
            Map<String, Boolean> alivedCellsByCoords = new HashMap<>();
            for (int row = 0; row < 4; row++) {
                for (int column = 0; column < 8; column++) {
                    boolean alivedCells = gameOfLife.isAlived(row, column);
                    alivedCellsByCoords.put(row + "," + column, alivedCells);
                }
            }
            Boolean sum = alivedCellsByCoords.values().stream().allMatch(value -> !value);
            assertTrue(sum, alivedCellsByCoords.toString());
=======
            Map<String, Boolean> aliveCellsByCoords = new HashMap<>();
            for (int row = 0; row < 4; row++) {
                for (int column = 0; column < 8; column++) {
                    boolean aliveCells = gameOfLife.isAlive(row, column);
                    aliveCellsByCoords.put(row + "," + column, aliveCells);
                }
            }
            Boolean sum = aliveCellsByCoords.values().stream().allMatch(value -> !value);
            assertTrue(sum, aliveCellsByCoords.toString());
>>>>>>> main
        }
    }

    @Nested
    class AlterationAndControls {
        /**
<<<<<<< HEAD
         * Modifier l'êtat d'une cellule et récupérer son état 
=======
         * Modifier l’état d'une cellule et récupérer son état 
>>>>>>> main
         * @throws OutOfRangeException 
         */
        @Test void canAlterCellState() throws OutOfRangeException {
            gameOfLife.setLivingCell(0, 0);
    
            assertTrue(gameOfLife.isAlive(0, 0));
        }
    
        /**
         * Demander une opération sur une cellule hors grille lance une exception
         */
        @Test void outOfRangeSetLivingCell() {
            assertThrows(OutOfRangeException.class, () -> gameOfLife.setLivingCell(-1, 0));
            assertThrows(OutOfRangeException.class, () -> gameOfLife.setLivingCell(8, 4));
            assertThrows(OutOfRangeException.class, () -> gameOfLife.setLivingCell(8, 4));
        }
    
        /**
         * Demander une opération sur une cellule hors grille lance une exception
         */
<<<<<<< HEAD
        @Test void outOfRangeCountLivingNeighbours() {
            assertThrows(OutOfRangeException.class, () -> gameOfLife.countLivingNeighbours(-1, 0));
            assertThrows(OutOfRangeException.class, () -> gameOfLife.countLivingNeighbours(8, 4));
            assertThrows(OutOfRangeException.class, () -> gameOfLife.countLivingNeighbours(8, 4));
=======
        @Test void outOfRangeCountLivingNeighbors() {
            assertThrows(OutOfRangeException.class, () -> gameOfLife.countLivingNeighbors(-1, 0));
            assertThrows(OutOfRangeException.class, () -> gameOfLife.countLivingNeighbors(8, 4));
            assertThrows(OutOfRangeException.class, () -> gameOfLife.countLivingNeighbors(8, 4));
>>>>>>> main
        }
        
        /**
         * Le compte de voisin vivant est opérationnel pour une cellule
         * @throws OutOfRangeException 
         */
<<<<<<< HEAD
        @Test void countOneLivingNeighbour() throws OutOfRangeException {
            gameOfLife.setLivingCell(1,1);
    
            // La cellule ne se compte pas elle même
            assertEquals(0, gameOfLife.countLivingNeighbours(1, 1));
            
            // Les 8 Voisins
            assertEquals(1, gameOfLife.countLivingNeighbours(0, 0));
            assertEquals(1, gameOfLife.countLivingNeighbours(0, 1));
            assertEquals(1, gameOfLife.countLivingNeighbours(0, 2));
            assertEquals(1, gameOfLife.countLivingNeighbours(1, 0));
            
            assertEquals(1, gameOfLife.countLivingNeighbours(1, 2));
            assertEquals(1, gameOfLife.countLivingNeighbours(2, 0));
            assertEquals(1, gameOfLife.countLivingNeighbours(2, 1));
            assertEquals(1, gameOfLife.countLivingNeighbours(2, 2));
=======
        @Test void countOneLivingNeighbor() throws OutOfRangeException {
            gameOfLife.setLivingCell(1,1);
    
            // La cellule ne se compte pas elle même
            assertEquals(0, gameOfLife.countLivingNeighbors(1, 1));
            
            // Les 8 Voisins
            assertEquals(1, gameOfLife.countLivingNeighbors(0, 0));
            assertEquals(1, gameOfLife.countLivingNeighbors(0, 1));
            assertEquals(1, gameOfLife.countLivingNeighbors(0, 2));
            assertEquals(1, gameOfLife.countLivingNeighbors(1, 0));
            
            assertEquals(1, gameOfLife.countLivingNeighbors(1, 2));
            assertEquals(1, gameOfLife.countLivingNeighbors(2, 0));
            assertEquals(1, gameOfLife.countLivingNeighbors(2, 1));
            assertEquals(1, gameOfLife.countLivingNeighbors(2, 2));
>>>>>>> main
        }
    
        /**
         * Le compte est opérationnel pour plus d'une cellule vivante
         * @throws OutOfRangeException 
         */
<<<<<<< HEAD
        @Test void countLivingNeighbours() throws OutOfRangeException {
=======
        @Test void countLivingNeighbors() throws OutOfRangeException {
>>>>>>> main
            gameOfLife.setLivingCell(1,1);
            gameOfLife.setLivingCell(2,2);
    
            // La cellule ne se compte pas elle même
<<<<<<< HEAD
            assertEquals(1, gameOfLife.countLivingNeighbours(1, 1));
            assertEquals(1, gameOfLife.countLivingNeighbours(2, 2));
            
            // Les Voisins
            assertEquals(2, gameOfLife.countLivingNeighbours(2, 1));
            assertEquals(2, gameOfLife.countLivingNeighbours(1, 2));
    
            assertEquals(1, gameOfLife.countLivingNeighbours(0, 2));
            assertEquals(1, gameOfLife.countLivingNeighbours(3, 2));
        } 
    
        /**
         * CountLivingNeighbours fonctionne dans les coins
         * @throws OutOfRangeException 
         */
        @Test void countLivingNeighboursInCorners() throws OutOfRangeException {
=======
            assertEquals(1, gameOfLife.countLivingNeighbors(1, 1));
            assertEquals(1, gameOfLife.countLivingNeighbors(2, 2));
            
            // Les Voisins
            assertEquals(2, gameOfLife.countLivingNeighbors(2, 1));
            assertEquals(2, gameOfLife.countLivingNeighbors(1, 2));
    
            assertEquals(1, gameOfLife.countLivingNeighbors(0, 2));
            assertEquals(1, gameOfLife.countLivingNeighbors(3, 2));
        } 
    
        /**
         * CountLivingNeighbors fonctionne dans les coins
         * @throws OutOfRangeException 
         */
        @Test void countLivingNeighborsInCorners() throws OutOfRangeException {
>>>>>>> main
            gameOfLife.setLivingCell(0, 1);
            gameOfLife.setLivingCell(1, 1);
            gameOfLife.setLivingCell(1, 0);
    
<<<<<<< HEAD
            assertEquals(3, gameOfLife.countLivingNeighbours(0, 0));
=======
            assertEquals(3, gameOfLife.countLivingNeighbors(0, 0));
>>>>>>> main
        }
    }

    @Nested
    class NextGenerationComputing {
        /**
<<<<<<< HEAD
         * Nouvelle Génération - Test livingNeighbours < 2 alors on meurt
         * @throws OutOfRangeException 
         */
        @Test void lessThanTwoLivingNeighbours() throws OutOfRangeException {
=======
         * Nouvelle Génération - Test livingNeighbors < 2 alors on meurt
         * @throws OutOfRangeException 
         */
        @Test void lessThanTwoLivingNeighbors() throws OutOfRangeException {
>>>>>>> main
            gameOfLife.setLivingCell(0, 0);
    
            assertTrue(gameOfLife.isAlive(0, 0));
            gameOfLife.nextGeneration();
            assertFalse(gameOfLife.isAlive(0, 0));
        }
    
        /**
         * Nouvelle Génération - Surpopulation
         * @throws OutOfRangeException 
         */
<<<<<<< HEAD
        @Test void moreThanThreeLivingNeighbours() throws OutOfRangeException {
=======
        @Test void moreThanThreeLivingNeighbors() throws OutOfRangeException {
>>>>>>> main
            gameOfLife.setLivingCell(0, 0);
            gameOfLife.setLivingCell(0, 1);
            gameOfLife.setLivingCell(0, 2);
            gameOfLife.setLivingCell(1, 0);
            gameOfLife.setLivingCell(1, 1);
    
            assertTrue(gameOfLife.isAlive(0, 1));
            assertTrue(gameOfLife.isAlive(1, 1));
            gameOfLife.nextGeneration();
            assertFalse(gameOfLife.isAlive(0, 1));
            assertFalse(gameOfLife.isAlive(1, 1));
        }
    
        /**
         * Nouvelle Génération - Staying Alive
         * @throws OutOfRangeException 
         */
<<<<<<< HEAD
        @Test void alivedAndTwoOrThreeNeighbours() throws OutOfRangeException {
=======
        @Test void aliveAndTwoOrThreeNeighbors() throws OutOfRangeException {
>>>>>>> main
            gameOfLife.setLivingCell(0, 0);
            gameOfLife.setLivingCell(0, 1);
            gameOfLife.setLivingCell(0, 2);
            gameOfLife.setLivingCell(1, 0);
            gameOfLife.setLivingCell(1, 1);
    
<<<<<<< HEAD
            assertTrue(gameOfLife.isAlived(0, 0));
            assertTrue(gameOfLife.isAlived(1, 0));
            gameOfLife.nextGeneration();
            assertTrue(gameOfLife.isAlived(0, 0));
            assertTrue(gameOfLife.isAlived(1, 0));
=======
            assertTrue(gameOfLife.isAlive(0, 0));
            assertTrue(gameOfLife.isAlive(1, 0));
            gameOfLife.nextGeneration();
            assertTrue(gameOfLife.isAlive(0, 0));
            assertTrue(gameOfLife.isAlive(1, 0));
>>>>>>> main
        }
    
        /**
         * Nouvelle Génération - Expansion
         * @throws OutOfRangeException 
         */
<<<<<<< HEAD
        @Test void deadAndThreeNeighbours() throws OutOfRangeException {
=======
        @Test void deadAndThreeNeighbors() throws OutOfRangeException {
>>>>>>> main
            gameOfLife.setLivingCell(0, 0);
            gameOfLife.setLivingCell(0, 1);
            gameOfLife.setLivingCell(0, 2);
            gameOfLife.setLivingCell(1, 0);
            gameOfLife.setLivingCell(1, 1);
    
            assertFalse(gameOfLife.isAlive(1, 2));
            gameOfLife.nextGeneration();
            assertTrue(gameOfLife.isAlive(1, 2));
        }
    
        /**
         * Nouvelle Génération - Non Expansion
         * @throws OutOfRangeException 
         */
<<<<<<< HEAD
        @Test void deadAndMoreThanThreeNeighbours() throws OutOfRangeException {
=======
        @Test void deadAndMoreThanThreeNeighbors() throws OutOfRangeException {
>>>>>>> main
            gameOfLife.setLivingCell(0, 0);
            gameOfLife.setLivingCell(0, 1);
            gameOfLife.setLivingCell(0, 2);
            gameOfLife.setLivingCell(1, 0);
            gameOfLife.setLivingCell(1, 1);
            gameOfLife.setLivingCell(2, 2);
    
            assertFalse(gameOfLife.isAlive(1, 2));
            gameOfLife.nextGeneration();
            assertFalse(gameOfLife.isAlive(1, 2));
        }
    }


    private GameOfLife gameOfLife;
}
