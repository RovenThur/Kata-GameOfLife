/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package game.of.life;

import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

import java.util.HashMap;
import java.util.Map;

import org.junit.jupiter.api.BeforeEach;

class GameOfLifeTest {
    @BeforeEach public void before() {
        gameOfLife = new GameOfLife(4, 8);
    }
    
    /**
     * L'application doit s'initialisée
     */
    @Test void gameOfLifeIsInitialized() {
        assertNotNull(gameOfLife);
        assertArrayEquals(new int[]{4, 8}, gameOfLife.getGridSize());
    }

    /**
     * Toutes les cellules doivent être initialisées mortes
     */
    @Test void allCellsInitializedAsEmpty() {
        Map<int[], Integer> alivedCellsByCoords = new HashMap<>();
        for (int row = 0; row < 4; row++) {
            for (int column = 0; column < 8; column++) {
                Integer alivedCells = gameOfLife.countLivingNeighbours(row, column);
                int[] coords = new int[]{row, column};
                alivedCellsByCoords.put(coords, alivedCells);
            }
        }
        Integer sum = alivedCellsByCoords.values().stream().reduce(0, Integer::sum);
        assertEquals(sum, 0, alivedCellsByCoords.toString());
    }

    /**
     * Demander une opération sur une cellule hors grille lance une exception
     */
    @Test void outOfRange() {
        assertThrows(OutOfRangeException.class, () -> gameOfLife.setLivingCell(-1, 0));
        assertThrows(OutOfRangeException.class, () -> gameOfLife.setLivingCell(8, 4));
        assertThrows(OutOfRangeException.class, () -> gameOfLife.setLivingCell(8, 4));

        assertThrows(OutOfRangeException.class, () -> gameOfLife.countLivingNeighbours(-1, 0));
        assertThrows(OutOfRangeException.class, () -> gameOfLife.countLivingNeighbours(8, 4));
        assertThrows(OutOfRangeException.class, () -> gameOfLife.countLivingNeighbours(8, 4));
    }
    
    /**
     * Le compte de voisin vivant est opérationnel pour une cellule
     */
    @Test void foundOneLivingNeighbour() {
        gameOfLife.setLivingCell(1,1);

        // La cellule ne se compte pas elle même
        assertEquals(gameOfLife.countLivingNeighbours(1, 1), 0);
        
        // Les 8 Voisins
        assertEquals(gameOfLife.countLivingNeighbours(0, 0), 1);
        assertEquals(gameOfLife.countLivingNeighbours(0, 1), 1);
        assertEquals(gameOfLife.countLivingNeighbours(0, 2), 1);
        assertEquals(gameOfLife.countLivingNeighbours(1, 0), 1);
        
        assertEquals(gameOfLife.countLivingNeighbours(1, 2), 1);
        assertEquals(gameOfLife.countLivingNeighbours(2, 0), 1);
        assertEquals(gameOfLife.countLivingNeighbours(2, 1), 1);
        assertEquals(gameOfLife.countLivingNeighbours(2, 2), 1);
    }

    /**
     * Le compte est opérationnel pour plus d'une cellule vivante
     */
    @Test void foundLivingNeighbours() {
        gameOfLife.setLivingCell(1,1);
        gameOfLife.setLivingCell(2,2);

        // La cellule ne se compte pas elle même
        assertEquals(gameOfLife.countLivingNeighbours(1, 1), 0);
        assertEquals(gameOfLife.countLivingNeighbours(2, 2), 0);
        
        // Les Voisins
        assertEquals(gameOfLife.countLivingNeighbours(2, 1), 2);
        assertEquals(gameOfLife.countLivingNeighbours(1, 2), 2);

        assertEquals(gameOfLife.countLivingNeighbours(0, 2), 1);
        assertEquals(gameOfLife.countLivingNeighbours(3, 2), 1);
    } 

    private GameOfLife gameOfLife;
}
